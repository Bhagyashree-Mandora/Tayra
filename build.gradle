apply plugin: 'groovy'
apply plugin: 'eclipse'
apply plugin: 'idea'

apply plugin: 'checkstyle' //for java code conventions
apply plugin: 'jdepend'  //for dependency analysis
apply plugin: 'findbugs' //for static code analysis
apply plugin: 'pmd'

defaultTasks 'clean', 'build'

sourceCompatibility = '1.6'
targetCompatibility = '1.6'

project.ext {

  //App Config
  appConfigUrl = new URL("file:///${projectDir}/AppConfig.groovy")
  appConfig = new ConfigSlurper('configuration').parse(appConfigUrl).configuration
  manifest = project.ext.appConfig.product.distribution.jar.manifest.details

  //libs
  mongoDriver = 'org.mongodb:mongo-java-driver:2.7.3'
  groovy = 'org.codehaus.groovy:groovy-all:2.0.4'
  commonsCli = 'commons-cli:commons-cli:1.1'
  functionaljava = 'org.functionaljava:functionaljava:3.1'

  //test-libs
  junit = 'junit:junit:4.8.1'
  hamcrest = 'org.hamcrest:hamcrest-all:1.3'
  mockito = 'org.mockito:mockito-all:1.9.0'

  //code coverage lib
  coberturaLib = 'net.sourceforge.cobertura:cobertura:1.9.4.1'
  instrumentedClassesDir = "$project.buildDir/classes/instrumented"
  coverageReportsDir = "$reporting.baseDir/cobertura"
  coverageDataFile = 'cobertura.ser'
  lineCoverageBaseline = 85
  branchCoverageBaseline = 70

  //Distribution settings
  distsTemplateDir = 'distribution-template'
  distsBinDir = "$distsDir/bin"
}

project.archivesBaseName = project.ext.appConfig.product.distribution.name

repositories {
  mavenCentral()
  mavenRepo url: 'http://bits.netbeans.org/maven2/'
  mavenRepo url: 'http://functionaljava.googlecode.com/svn/maven/'
}

configurations {
	cobertura
	compile
}

dependencies {
  groovy(groovy)
  compile(project.ext.mongoDriver, project.ext.groovy, project.ext.commonsCli, project.ext.functionaljava)
  testCompile(project.ext.hamcrest, project.ext.junit, project.ext.mockito)
  cobertura(project.ext.coberturaLib)
  testRuntime(project.ext.coberturaLib)
}

jar {
	manifest {
		attributes.putAll(project.ext.manifest)
	}

	doLast {
		copy {
			from (configurations.compile.asPath.split(File.pathSeparator))
			into "$libsDir"
		}
	}
}

clean << {
	ant.delete(file:"$coverageDataFile")
}

test {
	def originalClasspath = getClasspath()
	doFirst {
		ant.taskdef(resource:'tasks.properties', classpath:configurations.cobertura.asPath)
		//Note the classpath order: instrumented classes are before the original
		//uninstrumented classes.  This is important
		setClasspath(files("$instrumentedClassesDir") + originalClasspath)

		ant.'cobertura-instrument'(todir:project.ext.instrumentedClassesDir) {
			ignore(regex:"org.apache.*, com.mongodb.*")
			fileset(dir:"${project.buildDir}/classes/main", includes:'**/*.class', excludes:'**/*Specs.class')
		}
	}

	doLast {
		ant.'cobertura-report'(destDir: project.ext.coverageReportsDir, format:'xml') {
			sourceSets.main*.java.srcDirs*.each { fileset(dir:it) }
			sourceSets.main*.groovy.srcDirs*.each { fileset(dir:it) }
		}
		ant.'cobertura-report'(destDir: project.ext.coverageReportsDir, format:'html') {
			sourceSets.main*.java.srcDirs*.each { fileset(dir:it) }
			sourceSets.main*.groovy.srcDirs*.each { fileset(dir:it) }
		}
		ant.'cobertura-check'(totalbranchrate:project.ext.branchCoverageBaseline, totallinerate:project.ext.lineCoverageBaseline)
		setClasspath(originalClasspath)
	}
}

task distribute(type:Zip, dependsOn: 'assemble') {
	doFirst {
		ant.mkdir(dir:"$distsBinDir")
		prepareExecutables()
	}
	from "$project.ext.distsBinDir"
	from ("$project.ext.distsTemplateDir") { include ('**/*.txt', '**/*.document') }
	from("$libsDir") { into('libs') }
}

findbugs {
	toolVersion = "2.0.1"
	reportsDir = file("$reporting.baseDir/findbugs")
	effort = "max"
	reportLevel = "high"
}

tasks.withType(FindBugs) {
	excludeFilter = file("${projectDir}/config/findbugs/excludeFilter.xml")
}

checkstyleTest {
	exclude('**/*/*Specs.java')
}

def prepareExecutables() {
	def allLibFiles = new File("$libsDir").list().collect { "libs/$it" }.join(File.pathSeparator)
	new File("$distsTemplateDir").list().each { filename ->
		if(filename.startsWith('backup') || filename.startsWith('restore')) {
			def contents = new File("$distsTemplateDir/$filename").getText()
			new FileWriter("$distsBinDir/$filename").withWriter { writer ->
				if(filename.endsWith('.sh')) {
					writer.append contents.replace('%%JAVA_CLASS_PATH%%', "$allLibFiles").replaceAll(File.pathSeparator,':')
				}
				if(filename.endsWith('.bat')) {
					writer.append contents.replace('%%JAVA_CLASS_PATH%%', "$allLibFiles").replaceAll(File.pathSeparator,';')
				}
			}
		}
	}
}

build.dependsOn = ['check', 'distribute']
